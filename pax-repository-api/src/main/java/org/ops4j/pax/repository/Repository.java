/* * Copyright (C) 2010 Toni Menzel * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.repository;import org.ops4j.pax.repository.Provider;/** * Meaning of a repository. Fundamental source of artifacts. * Implementation is usually a shared resource, so must be threadsafe. * * The T is a contract with {@link org.ops4j.pax.repository.Index} implementations. * T is the unit of a single artifact identification. * Clients - usually {@link org.ops4j.pax.repository.Index} implementations - * are responsible to only ask ({@link Repository#retrieve(Object)}) for T that has been retrieved from {@link Repository#index(IndexVisitor)} invokations. * * It makes sense to keep T rather simple so that many different index implementations can be used. */public interface Repository<T, R> {    /**     * Gives parameter visitor all items that are available in this repository.     *     * @param visitor A visitor that collects the data.     *     * @throws org.ops4j.pax.repository.RepositoryException     *          In case of a problem.     */    void index( IndexVisitor<T> visitor )        throws RepositoryException;    /**     * Retrieve the actual artifact.     *     * @param identifier what to load. Got that from a index, presumably.     *     * @return The artifact itself.     *     * @throws RepositoryException In case of a problem     */    Provider<R> retrieve( T identifier )        throws RepositoryException;}