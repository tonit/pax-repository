/* * Copyright (C) 2011 Toni Menzel * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.repository;/** * Provider Type modeled after {@code javax.inject.Provider}. * <p> * Its because our repository api does not really have anything to do with {@code javax.inject.Provider}  from a semantic perspective. * <BR/> * (Look at the FullyQualifiedName, not just he Class Name). * </p> */public interface Provider<T> {    /**     * Actually getting the underlying resource.Depending on the implementation it could be a pre-fetched resource or something more time consuming.     * Once the resource T is provided, you should "consume" it as soon as possible.     * Thats the main purpose of having a delegator like this at all. Otherwise you could just pass T around directly.     *     * {@code Provider} instances on the other hand are usually (!) lightweight.     *     * @return Underlying possibly short lived, resource instance. Consume after getting.     *     * @throws RepositoryException In case of a probably provisioning the actual resource     *                             from a repository component ({@link Repository} itself or {@link Index}.     */    T get()        throws RepositoryException;}