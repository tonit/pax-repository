/* * Copyright (C) 2010 Toni Menzel * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.repository;/** * Foremost, Repositories are: * - per application (usually. not required technically) * - read only keys * - supports "future elements"  * * Intermidiate Layer between Resolver and Repository. * Expensive to create, access underlying repository. * Presumably requires some kind of local storage for caching. * * Will spawn indexed artifacts in a way that they can be queried efficiently using any valid variants of Q. * An Index where Q == T is called Template based Query Index. * * NOTE: Index knows all items in Repo by name. */public interface Index<Q, T, R> {    /**     * @param repository to be indexed     *     * @throws RepositoryException in case of a problem interacting with repository     */    void sync( Repository<T, R> repository )        throws RepositoryException;    /**     * Map a query to concrete resource.     * A {@link Resolver} implementation should make sure that the query is sufficient.     * So it may add data like defaults or even block unsufficient queries.     *     * @param query what to find     *     * @return An artifact     *     * @throws RepositoryException in case of a problem.     */    Provider<R> get( Q query )        throws RepositoryException;}