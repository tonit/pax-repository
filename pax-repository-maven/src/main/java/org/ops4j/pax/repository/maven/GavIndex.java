package org.ops4j.pax.repository.maven;import org.ops4j.pax.repository.Artifact;import org.ops4j.pax.repository.Index;import org.ops4j.pax.repository.RepositoryException;import org.ops4j.pax.repository.spi.IndexVisitor;import org.ops4j.pax.repository.spi.Repository;/** * This index maps GAV artifacts, which are both, query and indexing notation (see class declaration). * * Actually it allows to query using incomplete GAV in get(GAV). * This is known elsewhere as "Query by template". * * G:A:V:C */public class GavIndex implements Index<GAV, GAV>{    private Repository<GAV> m_repo;    private final Resolution<GAV, String> m_res;    public GavIndex()    {        m_res = new Neo4JBackedIndex<GAV, String>( null );    }    synchronized public Artifact get( GAV query )        throws RepositoryException    {        if( m_repo == null )        {            throw new IllegalStateException( "Index was never synced with a repository." );        }        return m_repo.retrieve( m_res.get( query.getGroupId(), query.getArtifactId(), query.getClassifier(), query.getVersion() ) );    }    synchronized public void sync( Repository<GAV> repository )        throws RepositoryException    {        m_repo = repository;        repository.index( new IndexVisitor<GAV>()        {            public void touch( GAV key )            {                m_res.put( key, key.getGroupId(), key.getArtifactId(), key.getClassifier(), key.getVersion() );            }        }        );    }}