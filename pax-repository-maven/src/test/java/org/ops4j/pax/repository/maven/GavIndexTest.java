package org.ops4j.pax.repository.maven;import org.junit.Test;import org.mockito.Matchers;import org.ops4j.base.io.EagerCachedInputStreamSource;import org.ops4j.base.io.InputStreamSource;import org.ops4j.base.io.UncachedInputStreamSource;import org.ops4j.pax.repository.Artifact;import org.ops4j.pax.repository.RepositoryException;import org.ops4j.pax.repository.spi.IndexVisitor;import org.ops4j.pax.repository.spi.Repository;import static org.hamcrest.CoreMatchers.*;import static org.junit.Assert.*;import static org.mockito.Mockito.*;import static org.ops4j.pax.repository.base.RepositoryFactory.*;/** * */public class GavIndexTest{    @Test    public void testSync()        throws RepositoryException    {        GavIndex index = new GavIndex();        Repository<GAV> repo = mock( Repository.class );        index.sync( repo );        verify( repo ).index( Matchers.<IndexVisitor<GAV>>any() );    }    @Test( expected = IllegalStateException.class )    public void testGetWithoutSync()        throws RepositoryException    {        GavIndex index = new GavIndex();        Repository<GAV> repo = mock( Repository.class );        GAV query = mock( GAV.class );        index.get( query );    }    @Test    public void testSyncAndRetrieve()        throws RepositoryException    {        Artifact storedArtifact = demoArtifact();        GavIndex index = new GavIndex();        Repository<GAV> repo = mock( Repository.class );        index.sync( repo );        GAV query = new DefaultArtifactQuery( "foo", "bar", "jar" );        GAV ask = new DefaultArtifactQuery( "foo", "bar", "1", "jar" );        when( repo.retrieve( query ) ).thenReturn( storedArtifact );        // we assume that querying the index means querying the index        Artifact artifact1 = index.get( query );        // index passed thru directly:        verify( repo ).retrieve( query );        assertEquals( artifact1, storedArtifact );    }    private Artifact demoArtifact()    {        return new Artifact()        {            public InputStreamSource getContent()                throws RepositoryException            {                return new UncachedInputStreamSource( getClass().getResourceAsStream( "/test.txt" ) );            }        };    }}