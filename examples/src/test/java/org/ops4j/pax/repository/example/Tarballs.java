package org.ops4j.pax.repository.example;import java.io.InputStream;import javax.inject.Named;import com.google.inject.AbstractModule;import com.google.inject.Guice;import com.google.inject.Injector;import com.google.inject.Key;import com.google.inject.TypeLiteral;import org.junit.Test;import org.ops4j.base.io.InputStreamSource;import org.ops4j.base.io.UncachedInputStreamSource;import org.ops4j.pax.repository.base.BaseModule;import org.ops4j.pax.repository.base.DefaultEntryParser;import org.ops4j.pax.repository.base.EmptyFilter;import org.ops4j.pax.repository.spi.ArtifactEntry;import org.ops4j.pax.repository.spi.ArtifactFilter;import org.ops4j.pax.repository.spi.EntryParser;import org.ops4j.pax.repository.spi.Repository;import org.ops4j.pax.repository.tarball.TarballModule;import org.ops4j.store.Store;import org.ops4j.store.StoreFactory;import static com.google.inject.name.Names.*;/** * */public class Tarballs{    /**     * The input data.     */    private AbstractModule testinput()    {        return new AbstractModule()        {            @Override            protected void configure()            {                bind( InputStreamSource.class ).annotatedWith(named("repository")).toInstance( new UncachedInputStreamSource( Tarballs.class.getResourceAsStream( "/" ) ) );            }        };    }    @Test    public void story()    {        Injector injector = Guice.createInjector( new TarballModule(), new BaseModule(), testinput() );        Repository repository = injector.getInstance( Key.get( new TypeLiteral<Repository<ArtifactEntry>>() {}));        // fully usable repo!        // use it!    }}