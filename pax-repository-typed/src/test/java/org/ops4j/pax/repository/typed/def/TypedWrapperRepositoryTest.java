/* * Copyright (C) 2011 Toni Menzel * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.repository.typed.def;import java.util.Arrays;import org.junit.Test;import org.mockito.Mockito;import org.ops4j.pax.repository.Provider;import org.ops4j.pax.repository.RepositoryException;import org.ops4j.pax.repository.Resolver;import org.ops4j.pax.repository.base.helpers.UncachedProvider;import org.ops4j.pax.repository.typed.TypedReference;import org.ops4j.pax.repository.typed.TypedRepository;import static junit.framework.Assert.*;import static org.ops4j.pax.repository.typed.def.DefaultTypeMapping.*;/** * Test */public class TypedWrapperRepositoryTest {    @Test    public void mapSimple()        throws RepositoryException    {        @SuppressWarnings( value = "unchecked" )        Resolver<String, String> resolver = Mockito.mock( Resolver.class );        Provider<String> resource = new UncachedProvider<String>( "A1" );        Mockito.when( resolver.find( "A1" ) ).thenReturn( resource );        TypedRepository<String> rep = new TypedWrapperRepository<String, String>(            resolver, Arrays.asList( map( Ref.A1, "A1" ),                                     map( Ref.A2, "A2" )        )        );        // Now you can use Ref.A1 to query the resolver with "A1".         assertEquals( resource, rep.get( Ref.A1 ) );        Mockito.verify( resolver, Mockito.times( 1 ) ).find( "A1" );    }    @Test( expected = RepositoryException.class )    public void queryMappedButNotInRepo()        throws RepositoryException    {        @SuppressWarnings( value = "unchecked" )        Resolver<String, String> resolver = Mockito.mock( Resolver.class );        TypedRepository<String> rep = new TypedWrapperRepository<String, String>( resolver, Arrays.asList( map( Ref.A1, "A1" ) ) );        assertNull( "There is no matching resource behind that, thus it should not work.", rep.get( Ref.A1 ) );        Mockito.verify( resolver, Mockito.times( 1 ) ).find( "A1" );    }    @Test( expected = RepositoryException.class )    public void queryNotMappedAndNotInRepo()        throws RepositoryException    {        @SuppressWarnings( value = "unchecked" )        Resolver<String, String> resolver = Mockito.mock( Resolver.class );        TypedRepository<String> rep = new TypedWrapperRepository<String, String>( resolver, Arrays.asList( map( Ref.A2, "A2" ) ) );        assertNull( "There is no matching resource behind that, thus it should not work.", rep.get( Ref.A1 ) );        Mockito.verify( resolver, Mockito.times( 0 ) ).find( "A1" );    }    enum Ref implements TypedReference {        A1, A2    }}