/* * Copyright (C) 2011 Toni Menzel * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.repository.typed.def;import org.junit.Test;import org.ops4j.pax.repository.Provider;import org.ops4j.pax.repository.RepositoryException;import org.ops4j.pax.repository.typed.TypedReference;import org.ops4j.pax.repository.typed.TypedRepository;import static junit.framework.Assert.*;/** * Test. */public class DefaultTypedRepositoryTest {    @Test( expected = IllegalArgumentException.class )    public void testGettingNullKey()        throws RepositoryException    {        TypedRepository<String> repo = new DefaultTypedRepository<String>();        repo.get( null );    }    @Test    public void testGettingNotExistingKeyWithoutFetching()        throws RepositoryException    {        TypedRepository<String> repo = new DefaultTypedRepository<String>();        assertNotNull( repo.get( Types.A ) );        // this works because the impl under test is lazy loading.    }    @Test( expected = RepositoryException.class )    public void testGettingNotExistingKeyWithFetching()        throws RepositoryException    {        TypedRepository<String> repo = new DefaultTypedRepository<String>();        Provider<String> provider = repo.get( Types.A );        // see we now fetch, fail !        provider.get();    }    @Test    public void testSetting()        throws RepositoryException    {        TypedRepository<String> repo = new DefaultTypedRepository<String>( true );        repo.set( Types.A ,"foo");        repo.set( Types.B ,"bar");        assertEquals("foo",repo.get( Types.A).get());        assertEquals("bar",repo.get( Types.B).get());    }    @Test( expected = RepositoryException.class )    public void testWriteOnlyOnceFailingSecondTime()        throws RepositoryException    {        TypedRepository<String> repo = new DefaultTypedRepository<String>( true );        repo.set( Types.A ,"foo");        // A again!        repo.set( Types.A, "bar" );    }    public void testResettingAllowed()        throws RepositoryException    {        TypedRepository<String> repo = new DefaultTypedRepository<String>( false );        repo.set( Types.A ,"foo");        assertEquals("foo",repo.get( Types.A).get());        // A again!        repo.set( Types.A ,"bar");        assertEquals("bar",repo.get( Types.A).get());    }    enum Types implements TypedReference {        A, B, C    }}