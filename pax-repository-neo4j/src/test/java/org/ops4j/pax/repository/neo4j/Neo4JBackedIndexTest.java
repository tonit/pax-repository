package org.ops4j.pax.repository.neo4j;import java.io.File;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.neo4j.graphdb.Node;import org.neo4j.graphdb.Path;import org.neo4j.graphdb.Relationship;import org.neo4j.graphdb.Transaction;import org.neo4j.kernel.EmbeddedGraphDatabase;import org.neo4j.kernel.Traversal;import static org.hamcrest.CoreMatchers.*;import static org.junit.Assert.*;import static org.ops4j.io.FileUtils.*;/** * */public class Neo4JBackedIndexTest{    private static final String DB_FOLDER = "target/db";    private EmbeddedGraphDatabase m_db;    @Test    public void testPutAndGet()    {        Neo4JBackedIndex<String, String> s = new Neo4JBackedIndex<String, String>( m_db );        String value = "foo";        String value2 = "bee";        s.put( "OTHER", "org", "ops4j", "cheese" );        s.put( value2, "org", "ops4j", "other" );        String put = s.put( value, "org", "ops4j", "pax" );        // assume we put the original!        assertThat( put, is( sameInstance( value ) ) );        // now retrieve it with nothing:        assertThat( s.get( "org", "ops4j", "pax" ), is( equalTo( value ) ) );        assertThat( s.get( "org", "", "pax" ), is( equalTo( value ) ) );        assertThat( s.get( "org", "", "other" ), is( equalTo( value2 ) ) );    }     @Test    public void testCompeting()    {        Neo4JBackedIndex<String, String> s = new Neo4JBackedIndex<String, String>( m_db );        String v1 = s.put( "O1", "org", "ops4j", "pax","exam","1.0.0" );        String v2 = s.put( "O2", "org", "ops4j", "pax","exam","2.0.0" );        String v15 = s.put( "O15", "org", "ops4j", "pax","exam","1.5.0" );               // now retrieve it with nothing:        assertThat( s.get( "org", "ops4j", "pax","exam","1.0.0" ), is( equalTo( v1 ) ) );        assertThat( s.get( "org", "ops4j", "pax","exam","1.5.0" ), is( equalTo( v15 ) ) );        assertThat( s.get( "org", "ops4j", "pax","exam","2.0.0" ), is( equalTo( v2 ) ) );        assertThat( s.get( "org", "ops4j", "pax","exam" ), is( equalTo( v2 ) ) );    }    @Before    public void before()    {        // make sure the db folder is clean:        delete( new File( DB_FOLDER ) );        m_db = new EmbeddedGraphDatabase( DB_FOLDER );    }    @After    public void after()    {        try        {            // remove();        } finally        {            m_db.shutdown();        }    }    private void print()    {        System.out.println( "------------------ All paths from ref node: " );        Transaction tx = m_db.beginTx();        try        {            final Node node = m_db.getReferenceNode();//            for( Path p : Traversal.description()                .depthFirst()                .traverse( node ) )            {                Object id2 = p.endNode().getProperty( "id", "D" );                System.out.println( "At depth: " + p.length() + " Node: " + id2 );                for( Relationship r : p.relationships() )                {                    System.out.println( "< " + r + " >  " + id2 );                }            }            tx.success();        } finally        {            tx.finish();        }    }}