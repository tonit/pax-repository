package org.ops4j.pax.repository.tarball;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;import java.util.Map;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;import javax.inject.Inject;import javax.inject.Named;import org.ops4j.base.io.InputStreamSource;import org.ops4j.pax.repository.Artifact;import org.ops4j.pax.repository.RepositoryException;import org.ops4j.pax.repository.base.CachedArtifact;import org.ops4j.pax.repository.spi.ArtifactFilter;import org.ops4j.pax.repository.spi.EntryParser;import org.ops4j.pax.repository.spi.IndexVisitor;import org.ops4j.pax.repository.spi.Repository;import org.ops4j.store.Store;import static org.ops4j.pax.repository.base.RepositoryFactory.*;/** * Special repository where all items are confined in a Zip compatible archive. * Mapping of entries is up to EntryParser (dependency). */public class TarballRepository<T> implements Repository<T>{    private final Map<T, Artifact> m_map = new HashMap<T, Artifact>();    @Inject    public TarballRepository( @Named( "repository" ) InputStreamSource input,                              Store<InputStream> store,                              ArtifactFilter<T> filter,                              EntryParser<T> parser )        throws RepositoryException    {        try        {            ZipInputStream inp = new ZipInputStream( input.get() );            ZipEntry zipEntry;            while( ( zipEntry = inp.getNextEntry() ) != null )            {                T id = parser.parse( entry( zipEntry.getName() ) );                if( filter.allow( id ) )                {                    m_map.put( id, new CachedArtifact( store, inp ) );                }            }        } catch( IOException e )        {            throw new RepositoryException( "Problem opening Repository from Archive.", e );        }    }    /**     * {@inheritDoc}     */    public void index( IndexVisitor<T> visit )        throws RepositoryException    {        for( T key : m_map.keySet() )        {            visit.touch( key );        }    }    /**     * {@inheritDoc}     */    public Artifact retrieve( final T id )        throws RepositoryException    {        Artifact artifact = m_map.get( id );        if( artifact == null )        {            throw new IllegalStateException( "Key " + id + " is not a valid entry in " + this + ". It has presumably not been produced by index(..)?" );        }        return artifact;    }    @Override    public String toString()    {        return "[ TarballRepository size=" + m_map.keySet().size() + " ]";    }}