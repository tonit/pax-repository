/* * Copyright (C) 2010 Toni Menzel * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.repository.guice;import java.io.InputStream;import javax.inject.Singleton;import com.google.inject.AbstractModule;import com.google.inject.Provides;import com.google.inject.TypeLiteral;import org.ops4j.pax.repository.ArtifactFilter;import org.ops4j.pax.repository.Mapping;import org.ops4j.pax.repository.base.EmptyFilter;import org.ops4j.pax.repository.base.helpers.EmptyMapping;import org.ops4j.pax.repository.typed.TypedRepository;import org.ops4j.pax.repository.typed.def.DefaultTypedRepository;import org.ops4j.store.Handle;import org.ops4j.store.Store;import org.ops4j.store.StoreFactory;/** * Some defaults */public class RepositoryBaseModule extends AbstractModule{    @Override    protected void configure()    {       // bind(SyncService.class).to( new TypeLiteral<PassiveBlockingSyncService<String,InputStream, String>>() { } );        bind(new TypeLiteral<TypedRepository< Handle >>(){ } ).to( new TypeLiteral<DefaultTypedRepository<Handle>>() {} );        bind(new TypeLiteral<ArtifactFilter< String >>(){ } ).toInstance( new EmptyFilter<String>(true) );        bind(new TypeLiteral<Mapping< String, String >>(){ } ).toInstance( new EmptyMapping<String>() );    }    @Provides    @Singleton    private Store<InputStream> store() {        return StoreFactory.defaultStore();    }}